<?php

namespace Tests\Feature;

use Corals\Settings\Facades\Modules;
use Corals\User\Models\User;
use Corals\Utility\Category\Models\Category;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Support\Facades\Auth;
use Tests\TestCase;

class UtilityCategoryTest extends TestCase
{
    use DatabaseTransactions;

    protected $category;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $user = User::query()->whereHas('roles', function ($query) {
            $query->where('name', 'superuser');
        })->first();
        Auth::loginUsingId($user->id);
    }

    public function test_utility_category_store()
    {
        $modules = [
            'Classified' => 'corals-classified',
            'TroubleTicket' => 'corals-trouble-ticket',
            'Directory' => 'corals-directory',
            'Marketplace' => 'corals-marketplace',
            'CMS' => 'corals-cms',
        ];
        $categories = ['planet', 'hotel', 'caves', 'streams'];
        $active = false;
        foreach ($modules as $module => $code) {
            if (Modules::isModuleActive($code)) {
                $active = true;
                $category = array_rand($categories);
                $response = $this->post('utilities/categories', [
                    "name" => $categories[$category],
                    "slug" => $categories[$category],
                    "status" => "active",
                    "module" => $module,
                ]);

                $this->category = Category::query()->first();

                $response->assertRedirect('utilities/categories')
                    ->assertDontSee('The given data was invalid');

                $this->assertDatabaseHas('utility_categories', [
                    "name" => $this->category->name,
                    "slug" => $this->category->slug,
                    "status" => $this->category->status,
                    "module" => $this->category->module,
                ]);
            }
        }

        if (! $active) {
            $category = array_rand($categories);
            $response = $this->post('utilities/categories', [
                "name" => $categories[$category],
                "slug" => $categories[$category],
                "status" => "active",
                "module" => null,
                "parent_id" => null,
                "description" => null,
                "is_featured" => false,
            ]);
            $this->category = Category::query()->first();

            $response->assertRedirect('utilities/categories')
                ->assertDontSee('The given data was invalid');

            $this->assertDatabaseHas('utility_categories', [
                "name" => $this->category->name,
                "slug" => $this->category->slug,
                "status" => $this->category->status,
                "module" => $this->category->module,
            ]);
        }
    }

    public function test_utility_category_edit()
    {
        $this->test_utility_category_store();

        if ($this->category) {
            $response = $this->get('utilities/categories/' . $this->category->hashed_id . '/edit');

            $response->assertStatus(200)->assertViewIs('utility-category::categories.create_edit');
        }
        $this->assertTrue(true);
    }

    public function test_utility_category_update()
    {
        $this->test_utility_category_store();

        if ($this->category) {
            $response = $this->put('utilities/categories/' . $this->category->hashed_id, [
                "name" => $this->category->name,
                "slug" => $this->category->slug,
                "status" => 'inactive',
                "module" => $this->category->module,
                "parent_id" => $this->category->parent_id,
                "description" => $this->category->description,
                "is_featured" => $this->category->is_featured,]);

            $response->assertRedirect('utilities/categories');

            $this->assertDatabaseHas('utility_categories', [
                "name" => $this->category->name,
                "slug" => $this->category->slug,
                "status" => 'inactive',
                "module" => $this->category->module,
            ]);
        }
        $this->assertTrue(true);
    }

    public function test_utility_category_delete()
    {
        if ($this->category) {
            $response = $this->delete('utilities/categories/' . $this->category->hashed_id);

            $response->assertStatus(200)->assertSeeText('Category has been deleted successfully.');

            $this->isSoftDeletableModel(Category::class);
            $this->assertDatabaseMissing('utility_categories', [
                "name" => $this->category->name,
                "slug" => $this->category->slug,
                "status" => $this->category->status,
                "module" => $this->category->module, ]);
        }
        $this->assertTrue(true);
    }
}
