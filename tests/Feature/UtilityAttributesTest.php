<?php

namespace Tests\Feature;

use Corals\Utility\Category\Models\Attribute;
use Corals\User\Models\User;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Support\Facades\Auth;
use Tests\TestCase;

class UtilityAttributesTest extends TestCase
{
    use DatabaseTransactions;

    protected $attribute;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $user = User::query()->whereHas('roles', function ($query) {
            $query->where('name', 'superuser');
        })->first();
        Auth::loginUsingId($user->id);
    }

    public function test_utility_attribute_store()
    {
        $attributes = get_array_key_translation(config('settings.models.custom_field_setting.supported_types'));
        $attribute = array_rand($attributes);
        $response = $this->post('utilities/attributes', [
            'type' => $attributes[$attribute],
            'label' => $attributes[$attribute],
            "display_order" => '0',
            "required" => false,
            "use_as_filter" => false,
        ]);
        $this->attribute = Attribute::query()->first();

        $response->assertRedirect('utilities/attributes')
            ->assertDontSee('The given data was invalid');

        $this->assertDatabaseHas('utility_attributes', [
            'type' => $this->attribute->type,
            'label' => $this->attribute->label,
            "display_order" => $this->attribute->display_order,
            "required" => $this->attribute->required,
            "use_as_filter" => $this->attribute->use_as_filter,
        ]);
    }

    public function test_utility_attribute_edit()
    {
        $this->test_utility_attribute_store();

        if ($this->attribute) {
            $response = $this->get('utilities/attributes/' . $this->attribute->hashed_id . '/edit');

            $response->assertStatus(200)->assertViewIs('utility-category::.attributes.create_edit');
        }
        $this->assertTrue(true);
    }

    public function test_utility_attribute_update()
    {
        $this->test_utility_attribute_store();

        if ($this->attribute) {
            $attributes = get_array_key_translation(config('settings.models.custom_field_setting.supported_types'));
            $attribute = array_rand($attributes);
            $response = $this->put('utilities/attributes/' . $this->attribute->hashed_id, [
                "type" => $attributes[$attribute],
                "label" => $this->attribute->label,
                "display_order" => $this->attribute->display_order,
                "required" => $this->attribute->required,
                "use_as_filter" => $this->attribute->use_as_filter,
                ]);

            $response->assertRedirect('utilities/attributes');

            $this->assertDatabaseHas('utility_attributes', [
                'type' => $attributes[$attribute],
                'label' => $this->attribute->label,
                "display_order" => $this->attribute->display_order,
                "required" => $this->attribute->required,
                "use_as_filter" => $this->attribute->use_as_filter,
            ]);
        }
        $this->assertTrue(true);
    }

    public function test_utility_attribute_delete()
    {
        $this->test_utility_attribute_store();

        if ($this->attribute) {
            $response = $this->delete('utilities/attributes/' . $this->attribute->hashed_id);

            $response->assertStatus(200)->assertSeeText('Attribute has been deleted successfully.');

            $this->isSoftDeletableModel(Attribute::class);
            $this->assertDatabaseMissing('utility_attributes', [
                'type' => $this->attribute->type,
                'label' => $this->attribute->label,
                "display_order" => $this->attribute->display_order,
                "required" => $this->attribute->required,
                "use_as_filter" => $this->attribute->use_as_filter,]);
        }
        $this->assertTrue(true);
    }
}
